#include "GRFMPrediction.h"

#include "GaitPhaseDetector.h"
#include "OpenSimUtils.h"
#include "Simulation.h"

#include <SimTKcommon/SmallMatrix.h>
#include <SimTKcommon/internal/Rotation.h>
#include <string>

using namespace std;
using namespace OpenSim;
using namespace OpenSimRT;
using namespace SimTK;

// compute the projection of a point or vector on a arbitrary plane
static Vec3 projectionOnPlane(const Vec3& point, const Vec3& planeOrigin,
                              const Vec3& planeNormal) {
    return point - SimTK::dot(point - planeOrigin, planeNormal) * planeNormal;
}

template <typename T> T clip(const T& n, const T& lower, const T& upper) {
    return std::max(lower, std::min(n, upper));
}
//==============================================================================

GRFMPrediction::GRFMPrediction(const Model& otherModel,
                               const Parameters& aParameters,
                               GaitPhaseDetector* detector)
        : model(*otherModel.clone()), gaitPhaseDetector(detector),
          parameters(aParameters) {
    // reserve memory size for computing the mean gait direction
    gaitDirectionBuffer.setSize(parameters.directionWindowSize);

    // add station points to the model for the CoP trajectory
    heelStationR =
            new Station(model.getBodySet().get(parameters.rStationBodyName),
                        parameters.rHeelStationLocation);
    heelStationL =
            new Station(model.getBodySet().get(parameters.lStationBodyName),
                        parameters.lHeelStationLocation);
    toeStationR =
            new Station(model.getBodySet().get(parameters.rStationBodyName),
                        parameters.rToeStationLocation);
    toeStationL =
            new Station(model.getBodySet().get(parameters.lStationBodyName),
                        parameters.lToeStationLocation);
    heelStationR->setName("heel_station_point_r");
    heelStationL->setName("heel_station_point_l");
    toeStationR->setName("toe_station_point_r");
    toeStationL->setName("toe_station_point_l");
    model.addModelComponent(heelStationR.get());
    model.addModelComponent(heelStationL.get());
    model.addModelComponent(toeStationR.get());
    model.addModelComponent(toeStationL.get());

    // disable muscles, otherwise they apply passive forces
    OpenSimUtils::disableActuators(model);

    // initialize system
    state = model.initSystem();

    // STA functions by Ren et al.
    anteriorForceTransition = [&](const double& t) -> double {
        auto k1 = exp(4.0 / 9.0);
        auto k2 = k1 * exp(-16.0 / 9.0) / 2.0;
        auto Tp = Tds / 3.0;
        return k1 * exp(-pow(2.0 * (t - Tp) / Tds, 2)) - 2.0 * k2 * t / Tds;
    };

    reactionComponentTransition = [&](const double& t) -> double {
        return exp(-pow((2.0 * t / Tds), 3));
    };

    // CoP trajectory (linear transition from heel -> metatarsal)
    copPosition = [&](const double& t, const Vec3& d) -> Vec3 {
        const auto omega = 2.0 * Pi / Tss;
        const auto scale =
                clip(-2.0 / (3 * Pi) *
                             (sin(omega * t) - sin(2 * omega * t) / 8 -
                              3.0 / 4.0 * omega * t),
                     0.0, 1.0);
        return scale * d;
    };
}

Vector GRFMPrediction::Output::asVector() {
    auto output = Vector(9);
    output[0] = point[0];
    output[1] = point[1];
    output[2] = point[2];
    output[3] = force[0];
    output[4] = force[1];
    output[5] = force[2];
    output[6] = moment[0];
    output[7] = moment[1];
    output[8] = moment[2];
    return output;
}

void GRFMPrediction::computeTotalReactionComponents(const Input& input,
                                                    Vec3& totalReactionForce,
                                                    Vec3& totalReactionMoment) {
    // get matter subsystem
    const auto& matter = model.getMatterSubsystem();

    // total forces / moments
    if (parameters.method == "ID") {
        // =========================================================================
        // method 1: compute total forces/moment from pelvis using ID
        // =========================================================================
        // get applied mobility (generalized) forces generated by components of
        // the model, like actuators
        const Vector& appliedMobilityForces =
                model.getMultibodySystem().getMobilityForces(state,
                                                             Stage::Dynamics);

        // get all applied body forces like those from contact
        const Vector_<SpatialVec>& appliedBodyForces =
                model.getMultibodySystem().getRigidBodyForces(state,
                                                              Stage::Dynamics);

        // perform inverse dynamics
        Vector tau;
        model.getMultibodySystem()
                .getMatterSubsystem()
                .calcResidualForceIgnoringConstraints(
                        state, appliedMobilityForces, appliedBodyForces,
                        input.qDDot, tau);

        //==========================================================================
        // spatial forces/moments in pelvis wrt the ground
        Vector_<SpatialVec> spatialGenForces;
        matter.multiplyBySystemJacobian(state, tau, spatialGenForces);
        const auto& idx = model.getBodySet()
                                  .get(parameters.pelvisBodyName)
                                  .getMobilizedBodyIndex();
        totalReactionForce = spatialGenForces[idx][1];
        totalReactionMoment = spatialGenForces[idx][0];

        // =========================================================================
        // method 2: compute the reaction forces/moment based on the
        // Newton-Euler equations
        //==========================================================================
    } else if (parameters.method == "Newton-Euler") {
        // compute body velocities and accelerations
        SimTK::Vector_<SimTK::SpatialVec> bodyVelocities;
        SimTK::Vector_<SimTK::SpatialVec> bodyAccelerations;
        matter.multiplyBySystemJacobian(state, input.qDot, bodyVelocities);
        matter.calcBodyAccelerationFromUDot(state, input.qDDot,
                                            bodyAccelerations);

        // compute total force / moments
        for (int i = 0; i < model.getNumBodies(); ++i) {
            const auto& body = model.getBodySet()[i];
            const auto& bix = body.getMobilizedBodyIndex();

            // F_ext = sum(m_i * (a_i - g) )
            totalReactionForce += body.getMass() * (bodyAccelerations[bix][1] -
                                                    model.getGravity());

            // M_ext = sum( I_i * omega_dot + omega x (I_i * omega)
            const auto& I = body.getInertia();
            totalReactionMoment +=
                    I * bodyAccelerations[bix][0] +
                    cross(bodyVelocities[bix][0], I * bodyVelocities[bix][0]);
        }
    }
}

SimTK::Rotation
GRFMPrediction::computeGaitDirectionRotation(const std::string& bodyName) {
    // compute mean gait direction from pelvis
    const auto& body = model.getBodySet().get(bodyName);
    const auto& mob = model.getMatterSubsystem().getMobilizedBody(
            body.getMobilizedBodyIndex());
    const auto& R_GB = mob.getBodyTransform(state).R();
    gaitDirectionBuffer.insert((~R_GB).col(0).asVec3());
    auto gaitDirection = projectionOnPlane(gaitDirectionBuffer.mean(), Vec3(0),
                                           Vec3(0, 1, 0));

    // rotation about the vertical axis to transform the reaction components
    // from the opensim global reference frame to the gait-direction
    // reference frame
    return SimTK::Rotation(
            std::atan(SimTK::dot(Vec3(0, 1, 0),
                                 SimTK::cross(gaitDirection, Vec3(1, 0, 0)))),
            Vec3(0, 1, 0));
}

vector<GRFMPrediction::Output>
GRFMPrediction::solve(const GRFMPrediction::Input& input) {
    // update state variables of this instance
    Output rightLegOutput;
    rightLegOutput.t = input.t;
    rightLegOutput.force = Vec3(0.0);
    rightLegOutput.moment = Vec3(0.0);
    rightLegOutput.point = Vec3(0.0);

    Output leftLegOutput;
    leftLegOutput.t = input.t;
    leftLegOutput.force = Vec3(0.0);
    leftLegOutput.moment = Vec3(0.0);
    leftLegOutput.point = Vec3(0.0);

    t = input.t;
    if (gaitPhaseDetector->isDetectorReady()) {
        // update model state
        updateState(input, model, state, Stage::Dynamics);

        auto R = computeGaitDirectionRotation(parameters.pelvisBodyName);

        // compute total reaction force/moment
        Vec3 totalReactionForce(0), totalReactionMoment(0);
        computeTotalReactionComponents(input, totalReactionForce,
                                       totalReactionMoment);
        totalReactionForce = R * totalReactionForce;
        totalReactionMoment = R * totalReactionMoment;

        // smooth transition assumption - forces
        Vec3 rightReactionForce, leftReactionForce;
        seperateReactionComponents(totalReactionForce, anteriorForceTransition,
                                   reactionComponentTransition,
                                   reactionComponentTransition,
                                   rightReactionForce, leftReactionForce);

        // smooth transition assumption - moments
        Vec3 rightReactionMoment, leftReactionMoment;
        seperateReactionComponents(
                totalReactionMoment, reactionComponentTransition,
                reactionComponentTransition, reactionComponentTransition,
                rightReactionMoment, leftReactionMoment);
        // point
        Vec3 rightPoint, leftPoint;
        computeReactionPoint(rightPoint, leftPoint);

        // results
        rightLegOutput.force = rightReactionForce;
        rightLegOutput.moment = rightReactionMoment;
        rightLegOutput.point = rightPoint;

        leftLegOutput.force = leftReactionForce;
        leftLegOutput.moment = leftReactionMoment;
        leftLegOutput.point = leftPoint;
    }
    return {rightLegOutput, leftLegOutput};
}

void GRFMPrediction::seperateReactionComponents(
        const Vec3& totalReactionComponent,
        const TransitionFuction& anteriorComponentFunction,
        const TransitionFuction& verticalComponentFunction,
        const TransitionFuction& lateralComponentFunction,
        Vec3& rightReactionComponent, Vec3& leftReactionComponent) {
    switch (gaitPhaseDetector->getPhase()) {
    case GaitPhaseState::GaitPhase::DOUBLE_SUPPORT: {
        // time since last HS
        double time = t - gaitPhaseDetector->getHeelStrikeTime();
        if (time == 0.0) totalReactionAtThs = totalReactionComponent;

        // previous DS time-period
        Tds = gaitPhaseDetector->getDoubleSupportDuration();

        // compute the trailing and leading leg reaction components
        Vec3 trailingReactionComponent, leadingReactionComponent;

        // trailing leg component
        trailingReactionComponent[0] =
                totalReactionAtThs[0] * anteriorComponentFunction(time);
        trailingReactionComponent[1] =
                totalReactionAtThs[1] * verticalComponentFunction(time);
        trailingReactionComponent[2] =
                totalReactionAtThs[2] * lateralComponentFunction(time);

        // leading leg component
        leadingReactionComponent =
                totalReactionComponent - trailingReactionComponent;

        // assign to output based on the current leading/trailing leg
        switch (gaitPhaseDetector->getLeadingLeg()) {
        case GaitPhaseState::LeadingLeg::RIGHT: {
            rightReactionComponent = leadingReactionComponent;
            leftReactionComponent = trailingReactionComponent;
        } break;
        case GaitPhaseState::LeadingLeg::LEFT: {
            rightReactionComponent = trailingReactionComponent;
            leftReactionComponent = leadingReactionComponent;
        } break;
        case GaitPhaseState::LeadingLeg::INVALID: {
            cerr << "STA: invalid LeadingLeg state!" << endl;
        } break;
        }
    } break;

    case GaitPhaseState::GaitPhase::LEFT_SWING: {
        rightReactionComponent = totalReactionComponent;
        leftReactionComponent = Vec3(0);
    } break;

    case GaitPhaseState::GaitPhase::RIGHT_SWING: {
        rightReactionComponent = Vec3(0);
        leftReactionComponent = totalReactionComponent;
    } break;

    default: {
        rightReactionComponent = Vec3(0);
        leftReactionComponent = Vec3(0);
    } break;
    }
}

void GRFMPrediction::computeReactionPoint(SimTK::Vec3& rightPoint,
                                          SimTK::Vec3& leftPoint) {
    // get previous SS time-period
    Tss = gaitPhaseDetector->getSingleSupportDuration();

    // determine gait phase
    switch (gaitPhaseDetector->getPhase()) {
    case GaitPhaseState::GaitPhase::DOUBLE_SUPPORT: {
        // first determine leading / trailing leg
        switch (gaitPhaseDetector->getLeadingLeg()) {
        case GaitPhaseState::LeadingLeg::RIGHT: {
            rightPoint = heelStationR->getLocationInGround(state);
            leftPoint = toeStationL->getLocationInGround(state);
        } break;
        case GaitPhaseState::LeadingLeg::LEFT: {
            rightPoint = toeStationR->getLocationInGround(state);
            leftPoint = heelStationL->getLocationInGround(state);
        } break;
        case GaitPhaseState::LeadingLeg::INVALID: {
            cerr << "CoP: invalid LeadingLeg state!" << endl;
        } break;
        }
    } break;

    case GaitPhaseState::GaitPhase::LEFT_SWING: {
        // distance between heel and toe station points on foot
        const auto d = toeStationR->getLocationInGround(state) -
                       heelStationR->getLocationInGround(state);

        // time since last toe-off event
        auto time = t - gaitPhaseDetector->getToeOffTime();

        // result CoP
        leftPoint = Vec3(0);
        rightPoint =
                heelStationR->getLocationInGround(state) + copPosition(time, d);
    } break;

    case GaitPhaseState::GaitPhase::RIGHT_SWING: {
        // distance between heel and toe station points on foot
        const auto d = toeStationL->getLocationInGround(state) -
                       heelStationL->getLocationInGround(state);

        // time since last toe-off event
        auto time = t - gaitPhaseDetector->getToeOffTime();

        // result CoP
        rightPoint = Vec3(0);
        leftPoint =
                heelStationL->getLocationInGround(state) + copPosition(time, d);
    } break;

    default: {
        rightPoint = Vec3(0.0);
        leftPoint = Vec3(0.0);
    } break;
    }
}
